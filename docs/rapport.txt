Sommaire


Résumé (ou avant propos)



Introduction

Ce projet vise à développer un module de gestion d'événements générique et est conçu pour être facilement intégré par des développeurs dans diverses applications. Notre système permet de visualiser, organiser et gérer des événements sur une grille avec des vues journalière, hebdomadaire, mensuelle et annuelle. L'objectif est d'offrir une solution flexible et modulaire, capable de s'adapter à différents besoins et contextes de développement.

Une caractéristique clé de ce module est la liberté accordée dans le format de définition des attributs des événements. Les développeurs peuvent ainsi personnaliser les événements selon leurs exigences spécifiques, facilitant ainsi l'intégration et l'utilisation du module dans divers projets. Construit selon une approche pilotée par les tests, ce module garantit robustesse et fiabilité pour chaque fonctionnalité développée.

Après avoir effectué une étude de l'existant, nous présenterons la démarche de conception, en explorant les défis rencontrés et les solutions apportées. Ce document offre en outre une vue d'ensemble complète de notre projet et des technologies utilisées, soulignant ainsi sa valeur en tant qu'outil de développement.




Etude de l'existant

Avant de développer ce module de calendrier générique, il était essentiel de comprendre les solutions existantes pour identifier les meilleures pratiques, les lacunes et les opportunités d'innovation. Cette étude examine les outils de calendrier actuellement disponibles sur le marché, en mettant en lumière leurs caractéristiques, avantages et limitations.


Applications de Gestion du Temps
Les applications telles que Google Calendar, Microsoft Outlook Calendar et Apple Calendar sont parmi les plus couramment utilisées. Elles offrent des fonctionnalités de base, comme la création d'événements, les rappels et des vues multiples (jour, semaine, mois).

Solutions de Calendrier pour Entreprises
Des solutions comme Microsoft Dynamics 365, Salesforce Calendar et Asana Calendar sont conçues pour s'intégrer dans des environnements de gestion de projets et des systèmes CRM. Elles offrent des fonctionnalités avancées adaptées aux besoins des entreprises.

Modules Open Source
Des modules open source tels que FullCalendar et React Big Calendar offrent des solutions flexibles pour les développeurs cherchant à intégrer des fonctionnalités de calendrier dans leurs applications web.

Besoins Non Couverts
À partir de cet examen, plusieurs besoins non couverts émergent :
    Intégration Facile : Besoin d'un module qui peut être facilement intégré dans différents systèmes de gestion sans nécessiter de modifications majeures.

    Gestion des Chevauchements : Amélioration de la gestion des chevauchements d'événements pour une meilleure visualisation et interaction.

    Vue Modulaire : Nécessité d'une vue modulaire permettant de basculer entre différentes perspectives temporelles (jour, semaine, mois, année) sans perte de fonctionnalité.

    Liberté de Structuration des Données : Manque de flexibilité dans la structuration des données entrantes. Les attributs des événements doivent être libres, permettant aux développeurs de définir les événements selon leurs besoins spécifiques.


Cette étude de l'existant révèle que, bien que de nombreux outils de calendrier soient disponibles, il existe des opportunités significatives d'amélioration. En tirant parti des avantages des solutions existantes tout en abordant leurs limitations, notre module de calendrier pourra offrir flexibilité et intégration optimales pour une variété de projets.





Conception et choix technique
La conception d'un module de calendrier générique nécessite une réflexion approfondie sur les choix techniques et architecturaux pour garantir que le produit final soit flexible, performant et facilement intégrable dans divers systèmes de gestion. 

I-/Conception
La conception de notre module de gestion d'événements s'est déroulée en plusieurs étapes clés. Voici un aperçu détaillé de cette démarche :

. Fonctionnalités
Nous avons commencé par établir une liste des fonctionnalités essentielles à inclure dans le module :

    # Affichage Multiple : Permettre à l'utilisateur de visualiser les événements sous différentes perspectives (jour, semaine, mois, année) pour s'adapter à ses besoins spécifiques.

    # Personnalisation des Attributs : Offrir une flexibilité dans la définition des attributs des événements, permettant aux utilisateurs d'entrer des données variées selon leurs besoins.

    # Gestion des Chevauchements : Intégrer une gestion visuelle des chevauchements d'événements, permettant ainsi une meilleure lisibilité et interaction sans nécessiter une fonctionnalité distincte.

    # Navigation Intuitive : Fournir une interface utilisateur simple et intuitive pour naviguer entre les différentes vues et gérer facilement les événements affichés.

    # Réactivité et Performance : Assurer une expérience fluide avec un chargement rapide des événements, même lorsque le calendrier contient de nombreuses entrées.

. Structures du Calendrier

    Une visualisation de la structure du calendrier a été essentielle pour assurer une gestion efficace des événements à travers différentes vues.

    Vue Journalière (Day) :
        Présente tous les événements d'une journée spécifique.
        Chaque case de la grille affiche les événements dans les intervalles de temps appropriés, permettant une visualisation claire des chevauchements.

    Vue Hebdomadaire (Week) :
        Affiche une semaine complète, permettant de visualiser les événements sur plusieurs jours.
        Utilise des subdivisions pour chaque jour, avec un format similaire à la vue journalière, facilitant l’identification des événements sur une période étendue.

    Vue Mensuelle (Month) :
        Permet une vue d'ensemble des événements sur un mois entier.
        Chaque jour du mois est représenté, et les événements sont résumés dans les cases correspondantes, facilitant la planification à long terme.

    Vue Annuelle (Year) :
        Fournit une vue d'ensemble des événements sur une année complète.
        Les événements sont regroupés par mois, permettant une visualisation des tendances et des événements majeurs sur l'année.


. Modélisation
Dans cette section, nous présentons le diagramme UML des classes principales du module de calendrier. Ce diagramme illustre les structures de classes et les interactions entre celles-ci, facilitant ainsi la compréhension de l'architecture du projet.

Schéma

Interprétation du Diagramme
    Classes Principales :
    Day, Month, Year : Ces classes encapsulent la logique nécessaire pour gérer les événements au sein de leurs périodes respectives, offrant des méthodes pour vérifier les événements, trouver des positions dans la grille, et construire des styles visuels.

    Interface IMode :
    Définie pour standardiser les méthodes que tout mode (jour, mois, année) doit implémenter, assurant une cohérence dans le comportement du calendrier.

    Classe Calendar :
    Centralise la gestion des modes, permettant de basculer entre les différentes vues tout en maintenant un état courant.




II-/ Choix techniques

    1. JavaScript et Mithril.js
    Nous avons choisi JavaScript comme langage principal pour le développement de notre module, en raison de sa flexibilité et de sa large adoption dans le développement web. Mithril.js, un framework JavaScript léger, a été sélectionné pour sa simplicité et sa performance. Il facilite la création d'applications web réactives et offre une architecture modulaire, idéale pour notre projet.
    
    2. CSS et Tailwind CSS
    Pour la gestion du style, nous utilisons CSS associé à Tailwind CSS. Ce dernier est un framework utilitaire qui permet de concevoir des interfaces de manière rapide et efficace, tout en garantissant une cohérence visuelle. Grâce à Tailwind CSS, nous pouvons personnaliser facilement les styles sans écrire de CSS supplémentaire, ce qui accélère le processus de développement.

    3. Développement Piloté par les Tests (TDD)
    L'approche de développement pilotée par les tests (TDD) a été adoptée pour assurer la robustesse et la fiabilité de notre module. En écrivant des tests avant le code, nous garantissons que chaque fonctionnalité répond aux exigences spécifiées. Cette méthode nous permet également de détecter rapidement les régressions et d'améliorer la qualité du code.

   4. GitHub
    Pour la gestion de version et la collaboration, nous avons choisi GitHub. Cette plateforme facilite le travail d'équipe, permet le suivi des modifications, et offre des outils pour la gestion des issues et des pull requests. Grâce à GitHub, nous pouvons assurer un développement fluide et structuré tout au long du projet.




Résultats et discussions



Conclusions et perspectives




Biographie




Annexe